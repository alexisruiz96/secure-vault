import axios from 'axios';
//TODO add this and test it to check it works
//TODO handle this requests adding a jwt or some kind of token
//TODO: test this
// const timeMax = 30000;
// axios.defaults.baseURL = "http://localhost:4000/";
export class ApiClient {
    constructor(baseUrl, timeout) {
        this._axios = axios.create({
            baseURL: baseUrl,
            timeout: timeout,
        });
    }
    //Utils
    checkAppendedFormData(formData) {
        for (let element of formData.entries()) {
            console.log(element[0] + ', ' + element[1]);
        }
    }
    async signUp(user) {
        try {
            const response = await this._axios({
                method: "post",
                url: "users/signup",
                data: {
                    username: user.username,
                    password: user.password,
                    epochtime: user.epochtime,
                    data: user.data,
                    email: user.email,
                },
                headers: {
                    Allow: "POST",
                    "Content-Type": "application/json",
                },
            });
            console.log(response);
        }
        catch (error) {
            console.error("Error creating user.");
        }
        return "";
    }
    async login(user) {
        const response = await this._axios({
            method: "post",
            url: "users/login",
            data: {
                username: user.username,
                password: user.password
                //TODO delete salt from server side login
            },
            headers: {
                Allow: "POST",
                "Content-Type": "application/json",
            },
        });
        this._axios.defaults.headers.common['Authorization'] = 'JWT ' + response.data.auth_token;
        return response;
    }
    logout() {
        this._axios.defaults.headers.common['Authorization'] = '';
    }
    async uploadData(formData, username, saltdata) {
        this.checkAppendedFormData(formData);
        //TODO add try catch
        return this._axios({
            method: "post",
            url: "files/upload",
            data: formData,
            headers: {
                Allow: "POST",
                "Content-Type": "multipart/form-data",
                username: username,
                saltdata: saltdata,
            },
        });
    }
    //TODO: add jwt to the authorization header
    async getDataSalt(user) {
        return this._axios({
            method: "get",
            url: "files/salt",
            params: {
                username: user,
            },
            headers: {
                Allow: "GET",
                "Content-Type": "application/json",
            },
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhpb3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2F4aW9zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBdUMsTUFBTSxPQUFPLENBQUM7QUFHNUQsNkNBQTZDO0FBQzdDLDhEQUE4RDtBQUU5RCxpQkFBaUI7QUFFakIseUJBQXlCO0FBRXpCLHFEQUFxRDtBQUVyRCxNQUFNLE9BQU8sU0FBUztJQUVsQixZQUFZLE9BQWUsRUFBRSxPQUFlO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUN2QixPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUUsT0FBTztTQUNuQixDQUFDLENBQUE7SUFDTixDQUFDO0lBR0QsT0FBTztJQUNDLHFCQUFxQixDQUFDLFFBQWtCO1FBQzVDLEtBQUssSUFBSSxPQUFPLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFFLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5QztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQVU7UUFDbkIsSUFBSTtZQUNBLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQztnQkFDL0IsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsR0FBRyxFQUFFLGNBQWM7Z0JBQ25CLElBQUksRUFBRTtvQkFDRixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtvQkFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO29CQUN6QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7b0JBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2lCQUNwQjtnQkFDRCxPQUFPLEVBQUU7b0JBQ0wsS0FBSyxFQUFFLE1BQU07b0JBQ2IsY0FBYyxFQUFFLGtCQUFrQjtpQkFDckM7YUFDSixDQUFDLENBQUM7WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3pCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDekM7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLElBQWdCO1FBRXhCLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLEVBQUUsTUFBTTtZQUNkLEdBQUcsRUFBRSxhQUFhO1lBQ2xCLElBQUksRUFBRTtnQkFDRixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7Z0JBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIseUNBQXlDO2FBQzVDO1lBQ0QsT0FBTyxFQUFFO2dCQUNMLEtBQUssRUFBRSxNQUFNO2dCQUNiLGNBQWMsRUFBRSxrQkFBa0I7YUFDckM7U0FDSixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLE1BQU0sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUN6RixPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTTtRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzlELENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUNaLFFBQWtCLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQjtRQUd0RCxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckMsb0JBQW9CO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNmLE1BQU0sRUFBRSxNQUFNO1lBQ2QsR0FBRyxFQUFFLGNBQWM7WUFDbkIsSUFBSSxFQUFFLFFBQVE7WUFDZCxPQUFPLEVBQUU7Z0JBQ0wsS0FBSyxFQUFFLE1BQU07Z0JBQ2IsY0FBYyxFQUFFLHFCQUFxQjtnQkFDckMsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFFBQVEsRUFBRSxRQUFRO2FBQ3JCO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELDJDQUEyQztJQUMzQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQVk7UUFDMUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ2YsTUFBTSxFQUFFLEtBQUs7WUFDYixHQUFHLEVBQUUsWUFBWTtZQUNqQixNQUFNLEVBQUU7Z0JBQ0osUUFBUSxFQUFFLElBQUk7YUFDakI7WUFDRCxPQUFPLEVBQUU7Z0JBQ0wsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osY0FBYyxFQUFFLGtCQUFrQjthQUNyQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcywgeyBBeGlvc1Jlc3BvbnNlLCBBeGlvc0luc3RhbmNlIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgSUxvZ2luVXNlciwgVXNlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvaW50ZXJmYWNlcyc7XG5cbi8vVE9ETyBhZGQgdGhpcyBhbmQgdGVzdCBpdCB0byBjaGVjayBpdCB3b3Jrc1xuLy9UT0RPIGhhbmRsZSB0aGlzIHJlcXVlc3RzIGFkZGluZyBhIGp3dCBvciBzb21lIGtpbmQgb2YgdG9rZW5cblxuLy9UT0RPOiB0ZXN0IHRoaXNcbiAgICAgICAgXG4vLyBjb25zdCB0aW1lTWF4ID0gMzAwMDA7XG4gICAgICAgIFxuLy8gYXhpb3MuZGVmYXVsdHMuYmFzZVVSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDo0MDAwL1wiO1xuXG5leHBvcnQgY2xhc3MgQXBpQ2xpZW50e1xuICAgIHByaXZhdGUgX2F4aW9zOiBBeGlvc0luc3RhbmNlO1xuICAgIGNvbnN0cnVjdG9yKGJhc2VVcmw6IHN0cmluZywgdGltZW91dDogbnVtYmVyKXtcbiAgICAgICAgdGhpcy5fYXhpb3MgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgICAgICAgYmFzZVVSTDogYmFzZVVybCxcbiAgICAgICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgICAgIH0pXG4gICAgfVxuICAgIFxuICAgIFxuICAgIC8vVXRpbHNcbiAgICBwcml2YXRlIGNoZWNrQXBwZW5kZWRGb3JtRGF0YShmb3JtRGF0YTogRm9ybURhdGEpe1xuICAgICAgICBmb3IgKGxldCBlbGVtZW50IG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZWxlbWVudFswXSsgJywgJyArIGVsZW1lbnRbMV0pOyBcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBzaWduVXAodXNlcjogVXNlcik6IFByb21pc2U8c3RyaW5nPntcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5fYXhpb3Moe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICAgICAgICAgICAgdXJsOiBcInVzZXJzL3NpZ251cFwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXIudXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiB1c2VyLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICBlcG9jaHRpbWU6IHVzZXIuZXBvY2h0aW1lLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB1c2VyLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBBbGxvdzogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcmVhdGluZyB1c2VyLlwiKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgbG9naW4odXNlcjogSUxvZ2luVXNlcik6IFByb21pc2U8QXhpb3NSZXNwb25zZT57XG4gICAgICAgIFxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuX2F4aW9zKHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAgICAgICAgICB1cmw6IFwidXNlcnMvbG9naW5cIixcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlci51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogdXNlci5wYXNzd29yZFxuICAgICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgc2FsdCBmcm9tIHNlcnZlciBzaWRlIGxvZ2luXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFsbG93OiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gJ0pXVCAnICsgcmVzcG9uc2UuZGF0YS5hdXRoX3Rva2VuO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuICAgIFxuICAgIGxvZ291dCgpOiB2b2lke1xuICAgICAgICB0aGlzLl9heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnQXV0aG9yaXphdGlvbiddID0gJyc7XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIHVwbG9hZERhdGEoXG4gICAgICAgIGZvcm1EYXRhOiBGb3JtRGF0YSwgdXNlcm5hbWU6IHN0cmluZywgc2FsdGRhdGE6IHN0cmluZ1xuICAgICk6IFByb21pc2U8QXhpb3NSZXNwb25zZT57XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNoZWNrQXBwZW5kZWRGb3JtRGF0YShmb3JtRGF0YSk7XG4gICAgICAgIC8vVE9ETyBhZGQgdHJ5IGNhdGNoXG4gICAgICAgIHJldHVybiB0aGlzLl9heGlvcyh7XG4gICAgICAgICAgICBtZXRob2Q6IFwicG9zdFwiLFxuICAgICAgICAgICAgdXJsOiBcImZpbGVzL3VwbG9hZFwiLFxuICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgQWxsb3c6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiLFxuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICBzYWx0ZGF0YTogc2FsdGRhdGEsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLy9UT0RPOiBhZGQgand0IHRvIHRoZSBhdXRob3JpemF0aW9uIGhlYWRlclxuICAgIGFzeW5jIGdldERhdGFTYWx0KHVzZXI6IHN0cmluZyl7XG4gICAgICAgIHJldHVybiB0aGlzLl9heGlvcyh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgICAgICAgICB1cmw6IFwiZmlsZXMvc2FsdFwiLFxuICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIEFsbG93OiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4iXX0=