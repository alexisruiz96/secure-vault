@startuml SetStorageV3
!pragma teoz true

box "Client" #LightBlue
entity App
box "Secure Vault Library" #LightSkyBlue
participant "Vault Library" as SVC
end box
end box
box "Server" #LightSalmon
participant Server
database PostgreSQL
end box

activate App
    App -> App : Get local last upload\nepochtime 
    App -> SVC: secureVault\n.setStorage(\n    File as JSON,epochtime\n)
        activate SVC
        SVC -> Server: POST files/checkuploadtime\n{epochtime,username}
        activate Server
        group Passport Jwt Strategy\n
        activate Server
            Server -> Server: Verify token
            Server -> PostgreSQL: Check username exists
            Server <-- PostgreSQL: Database Response
            Server -> Server: Passport Jwt Strategy\nCallback
        deactivate Server
        end
        Server -> PostgreSQL: Get epochtime for user
        Server <-- PostgreSQL: Database Response
        activate Server
            Server -> Server: Epochtime server\n == \nEpochtime client local
        deactivate Server
        SVC <-- Server: Response 200 with\n{isLastUpload = true\n,message}
        deactivate Server
        SVC -> SVC: Encrypt Storage File
        SVC -> Server: POST files/upload\n
        activate Server
        group Passport Jwt Strategy
            Server --> Server: ...
        end
        Server -> Google: Upload File
        Server <-- Google: Success
        Server -> PostgreSQL: Update epochtime,data\n & salt_data for user
        Server -> Google: Get Signed URL
        Server <-- Google: Signed URL
        SVC <-- Server: Response 201 with\n{message,"true",signedURL} 
        deactivate Server
        App <-- SVC: Response 201 with\n{decrypted storage, epochtime}
        deactivate SVC
    App -> App: Set Decrypted Storage
    App -> App: Set epochtime
deactivate App