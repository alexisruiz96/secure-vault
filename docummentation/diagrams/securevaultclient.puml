@startuml SecureVaulClient

interface Options {
    apiOptions: IApiOptions
    keyPrefixes: IKeyPrefixes
    cryptoOptions: ICryptoOptions
}

interface StorageContainer {
    epochtime: number
    data: string
}

class SecureVaultClient {
    - options: Options
    - initialized: boolean
    - cryptoUtil: CryptoUtil
    - apiClient: ApiClient
    - username: string

    + constructor(options: Options)
    + initialize(ILoginUser): Promise<Response>
    + signUp(User): Promise<number>
    ~ login(ILoginUser): Promise<Response>
    + logout(): void
    + getStorage(): Promise<Response>
    + setStorage(File, epochtime): Promise<Response>
    + subscribeStorage(): Promise<EventSourcePolyfill>
    + unsubscribeStorage(EventSourcePolyfill): void
    + getReadableStorage(Response): Promise<StorageContainer>
}

class CryptoUtil{
    - options: ICryptoOptions
    - encCryptoKey: string
    - subtleCrypto: SubtleCrypto

    + CryptoUtil(ICryptoOptions)
    + generateCryptoKey(keyData: string): Promise<string>
    + generateKey(password:string, base64Format:boolean)\n: Promise<string | ArrayBuffer>
    ~ generateFixedSalt(password: string)
    - generatePasswordHash(password: string,algorithm: string, base64Format): boolean
    + generateCryptoKey(keyData: string): Promise<string>
    + encryptData(data: ArrayBuffer)
    + decryptData(encryptedData: ArrayBuffer, dataIV: string)
    + downloadDataFromUrl(downloadUrl: string, saltData: string)
    + downloadDataFromLocalStorage(saltData: string)
    - convertBufferToBase64(data: ArrayBuffer)
    - convertBase64ToBuffer(data: string)
    - convertJwkToCryptoKey(jwk: string, algorithm: string)
    - formatEncryptedData(encryptedObject: EncryptedData)
}

class ApiClient{
    - axios: AxiosInstance

    + constructor(baseUrl: string, timeout: number)
    - checkAppendedFormData(formData: FormData)
    + signUp(user: User): Promise<number>
    + login(user: ILoginUser): Promise<AxiosResponse>
    + logout(): void
    + uploadData(
        \tformData: FormData, username: string,saltdata: string,uploadTime: number)\n\t: Promise<AxiosResponse>
    + getDataSalt(user: string): Promise<AxiosResponse>
    + getData(user: string): Promise<AxiosResponse>
    + checkIsLastUpload(user: string, uploadTime: number): Promise<AxiosResponse>
    + getAuthorizationHeadersStorage(user: string): JSON
}

interface IKeyPrefixes {
    authKey: string
    encKey: string
}

interface IApiOptions {
    baseUrl: string
    timeout: number
}

interface ICryptoOptions {
    format: "pkcs8" | "raw" | "spki"
    algorithm: "AES-CTR" | "AES-CBC" | "AES-GCM" | "AES-KW"
}

interface ILoginUser {
    username: string
    password: string
}

interface EncryptedData {
    base64IV: string
    base64Data: stringvault_data_epochtime
}

SecureVaultClient "1" *-- "1" CryptoUtil 
SecureVaultClient "1" *-- "1" ApiClient 
SecureVaultClient -- Options
SecureVaultClient -- StorageContainer
SecureVaultClient "1" *-- "*" ILoginUser
ApiClient "1" *-- "*" ILoginUser
Options "1" *-- "1" IApiOptions
Options "1" *-- "1" IKeyPrefixes
Options "1" *-- "1" ICryptoOptions
CryptoUtil "1" *-- "1" EncryptedData

@enduml